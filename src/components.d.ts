/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { PlacementProp } from "./components/checkbox/index.logic";
export namespace Components {
    interface AppRoot {
    }
    interface TlkButton {
        "theme": any;
    }
    interface TlkCheckbox {
        "checkboxId": string;
        "checked": boolean;
        "defaultChecked": boolean;
        "invalid": boolean;
        "placement": PlacementProp;
        "theme": any;
    }
    interface TlkCircularProgress {
        "indeterminate": boolean;
        "max": number;
        "min": number;
        "size": string;
        "theme": any;
        "value": number;
    }
    interface TlkConsumer {
        "renderer": Function;
    }
    interface TlkPortal {
        "appendTo": (newContainer: HTMLElement) => Promise<void>;
        "container": HTMLElement;
        "onAnimationEnd": (event: AnimationEvent) => void;
        "onAnimationStart": (event: AnimationEvent) => void;
        "onMounted": (portalElement: HTMLElement) => void;
        "onTransitionEnd": (event: TransitionEvent) => void;
        "theme": any;
    }
    interface TlkProgress {
        "indeterminate": boolean;
        "max": number;
        "min": number;
        "size": string;
        "theme": any;
        "value": number;
    }
    interface TlkProvider {
        "value": any;
    }
    interface TlkThemeManager {
        "avoidInheritStyles": boolean;
        "onMounted": (themeManagerElement: HTMLElement) => void;
        "styles": object;
    }
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLTlkButtonElement extends Components.TlkButton, HTMLStencilElement {
    }
    var HTMLTlkButtonElement: {
        prototype: HTMLTlkButtonElement;
        new (): HTMLTlkButtonElement;
    };
    interface HTMLTlkCheckboxElement extends Components.TlkCheckbox, HTMLStencilElement {
    }
    var HTMLTlkCheckboxElement: {
        prototype: HTMLTlkCheckboxElement;
        new (): HTMLTlkCheckboxElement;
    };
    interface HTMLTlkCircularProgressElement extends Components.TlkCircularProgress, HTMLStencilElement {
    }
    var HTMLTlkCircularProgressElement: {
        prototype: HTMLTlkCircularProgressElement;
        new (): HTMLTlkCircularProgressElement;
    };
    interface HTMLTlkConsumerElement extends Components.TlkConsumer, HTMLStencilElement {
    }
    var HTMLTlkConsumerElement: {
        prototype: HTMLTlkConsumerElement;
        new (): HTMLTlkConsumerElement;
    };
    interface HTMLTlkPortalElement extends Components.TlkPortal, HTMLStencilElement {
    }
    var HTMLTlkPortalElement: {
        prototype: HTMLTlkPortalElement;
        new (): HTMLTlkPortalElement;
    };
    interface HTMLTlkProgressElement extends Components.TlkProgress, HTMLStencilElement {
    }
    var HTMLTlkProgressElement: {
        prototype: HTMLTlkProgressElement;
        new (): HTMLTlkProgressElement;
    };
    interface HTMLTlkProviderElement extends Components.TlkProvider, HTMLStencilElement {
    }
    var HTMLTlkProviderElement: {
        prototype: HTMLTlkProviderElement;
        new (): HTMLTlkProviderElement;
    };
    interface HTMLTlkThemeManagerElement extends Components.TlkThemeManager, HTMLStencilElement {
    }
    var HTMLTlkThemeManagerElement: {
        prototype: HTMLTlkThemeManagerElement;
        new (): HTMLTlkThemeManagerElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "tlk-button": HTMLTlkButtonElement;
        "tlk-checkbox": HTMLTlkCheckboxElement;
        "tlk-circular-progress": HTMLTlkCircularProgressElement;
        "tlk-consumer": HTMLTlkConsumerElement;
        "tlk-portal": HTMLTlkPortalElement;
        "tlk-progress": HTMLTlkProgressElement;
        "tlk-provider": HTMLTlkProviderElement;
        "tlk-theme-manager": HTMLTlkThemeManagerElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface TlkButton {
        "onMounted"?: (event: CustomEvent<any>) => void;
        "theme"?: any;
    }
    interface TlkCheckbox {
        "checkboxId"?: string;
        "checked"?: boolean;
        "defaultChecked"?: boolean;
        "invalid"?: boolean;
        "onCheckboxChanged"?: (event: CustomEvent<any>) => void;
        "placement"?: PlacementProp;
        "theme"?: any;
    }
    interface TlkCircularProgress {
        "indeterminate"?: boolean;
        "max"?: number;
        "min"?: number;
        "size"?: string;
        "theme"?: any;
        "value"?: number;
    }
    interface TlkConsumer {
        "onConsumerMounted"?: (event: CustomEvent<any>) => void;
        "renderer"?: Function;
    }
    interface TlkPortal {
        "container"?: HTMLElement;
        "onAnimationEnd"?: (event: AnimationEvent) => void;
        "onAnimationStart"?: (event: AnimationEvent) => void;
        "onMounted"?: (portalElement: HTMLElement) => void;
        "onTransitionEnd"?: (event: TransitionEvent) => void;
        "theme"?: any;
    }
    interface TlkProgress {
        "indeterminate"?: boolean;
        "max"?: number;
        "min"?: number;
        "size"?: string;
        "theme"?: any;
        "value"?: number;
    }
    interface TlkProvider {
        "onConsumerMounted"?: (event: CustomEvent<any>) => void;
        "value"?: any;
    }
    interface TlkThemeManager {
        "avoidInheritStyles"?: boolean;
        "onMounted"?: (themeManagerElement: HTMLElement) => void;
        "styles"?: object;
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "tlk-button": TlkButton;
        "tlk-checkbox": TlkCheckbox;
        "tlk-circular-progress": TlkCircularProgress;
        "tlk-consumer": TlkConsumer;
        "tlk-portal": TlkPortal;
        "tlk-progress": TlkProgress;
        "tlk-provider": TlkProvider;
        "tlk-theme-manager": TlkThemeManager;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "tlk-button": LocalJSX.TlkButton & JSXBase.HTMLAttributes<HTMLTlkButtonElement>;
            "tlk-checkbox": LocalJSX.TlkCheckbox & JSXBase.HTMLAttributes<HTMLTlkCheckboxElement>;
            "tlk-circular-progress": LocalJSX.TlkCircularProgress & JSXBase.HTMLAttributes<HTMLTlkCircularProgressElement>;
            "tlk-consumer": LocalJSX.TlkConsumer & JSXBase.HTMLAttributes<HTMLTlkConsumerElement>;
            "tlk-portal": LocalJSX.TlkPortal & JSXBase.HTMLAttributes<HTMLTlkPortalElement>;
            "tlk-progress": LocalJSX.TlkProgress & JSXBase.HTMLAttributes<HTMLTlkProgressElement>;
            "tlk-provider": LocalJSX.TlkProvider & JSXBase.HTMLAttributes<HTMLTlkProviderElement>;
            "tlk-theme-manager": LocalJSX.TlkThemeManager & JSXBase.HTMLAttributes<HTMLTlkThemeManagerElement>;
        }
    }
}
